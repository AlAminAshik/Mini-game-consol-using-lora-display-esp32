#include <SPI.h>                // Include the SPI library for SPI communication
#include <Wire.h>               // Include the Wire library for I2C communication
#include <Adafruit_GFX.h>       // Include the Adafruit GFX library for graphics
#include <Adafruit_SSD1306.h>   // Include the Adafruit SSD1306 library for OLED display
#include "esp32-hal-ledc.h"

//setup the display
#define i2c_Address 0x3c //initialize with the I2C addr 0x3C Typically eBay OLED's
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET     -1  // Reset pin # (or -1 if sharing Arduino reset pin)
//TwoWire twi = TwoWire(1); // create our own TwoWire instance for I2C communication
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

//for hamba game
int cow_position = 0; // Variable to hold the cow's position
#define LOGO_HEIGHT   64
#define LOGO_WIDTH    128
// 'cow stroke image-01-01', 128x64px
const unsigned char cowOutline [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xec, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x3c, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x38, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x08, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x60, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x08, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x80, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x08, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xc0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x02, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x03, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x03, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x07, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x05, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x05, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x09, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x0a, 0x20, 0x06, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x12, 0x20, 0x19, 0x80, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x16, 0x40, 0x30, 0x60, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x1c, 0x40, 0x40, 0x1c, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x18, 0x40, 0x80, 0x03, 0xf8, 0x7f, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x0f, 0x81, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'cow filled image-02-02', 128x64px
const unsigned char cowFilled [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xec, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf8, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xfc, 0x00, 0x07, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x80, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x03, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x03, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x07, 0x1f, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x07, 0x1f, 0xf8, 0x3f, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x06, 0x1f, 0xe0, 0x0f, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x04, 0x1f, 0xc0, 0x01, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x07, 0xc0, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


//for number guess game
int targetNumber = 0; 
int currentNumber = 1;

//for cowRunning game
int8_t cowPosition = 0; // Current position of the cow
int8_t cowSpeed = 1; // Speed of the cow
unsigned long lastObstacleTime = 0; // Time when the last obstacle was generated
float score = 0.0; // Player's score

//button pin defined
#define playButton 25
volatile bool buttonPressed = false;
volatile unsigned long pressStartTime = 0;
volatile bool buttonHeld = false;

//other pins defined
#define RedLights 17
#define GreenLights 13 //pin 21 consumes too much power!
#define Buzzer_pin 5 // Buzzer pin  

bool runHambaMatch = false; // Flag to indicate if the game is running
bool runNumberHold = false; // Flag to indicate if the game is running
bool runHambaRun = false; // Flag to indicate if the game is running
bool endGame = true; // Flag to indicate if the game is over
uint16_t diffLevel = 1; //difficulty level for games

unsigned long previousMillis = 0; //for flashing leds
bool ledState = LOW; // Variable to hold the state of the LED

// Menu variables
int currentMenu = 0;   // 0 = first game, 1 = second game
const int menuCount = 3; // Total number of menu items

//show menu item name and cursor
void drawMenu() {
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);

  // Menu item 1
  display.setCursor(20, 10);
  display.print("Play Hamba Match");
  // Menu item 2
  display.setCursor(20, 30);
  display.print("Play Hamba Run");
  // Menu item 3
  display.setCursor(20, 50);
  display.print("Play Number Hold");

  // Draw arrow
  if (currentMenu == 0) {
    display.setCursor(5, 10);
    display.print(">");
  }
  else if(currentMenu == 1) {
    display.setCursor(5, 30);
    display.print(">");
  }
  else if(currentMenu == 2) {
    display.setCursor(5, 50);
    display.print(">");
  }
  display.display();
}
// Execute action based on selected menu item
void menuAction(int menuIndex) {
  if (menuIndex == 0) {
    runHambaMatch = true;  // Set flag to run Hamba game
    Serial.println("Function 1 executed");
  } else if (menuIndex == 1) {
    runHambaRun = true;  // Set flag to run Hamba Run game
    Serial.println("Function 2 executed");
  } else if (menuIndex == 2) {
    targetNumber = random(1, 11); // Set a initial random target number between 1 and 10
    runNumberHold = true;  // Set flag to run Number Hold game
    Serial.println("Function 3 executed");
  }
  display.display();
}

void testfillcircle(void) {
  display.clearDisplay();

  for(int16_t i=0; i<max(display.width(),display.height())/2; i+=3) {
    // The INVERSE color is used so circles alternate white/black
    display.fillCircle(display.width() / 2, display.height() / 2, i, SSD1306_INVERSE);
    display.display(); // Update screen with each newly-drawn circle
    delay(1);
  }

  delay(100);
}

//Starting Sound
void playStartSound() {
  ledcWriteTone(Buzzer_pin, 1000);
  delay(200);
  ledcWriteTone(Buzzer_pin, 1500);
  delay(200);
  ledcWriteTone(Buzzer_pin, 2000);
  delay(200);
  ledcWriteTone(Buzzer_pin, 0);
}

// Winning Sound
void playWinSound() {
  ledcWriteTone(Buzzer_pin, 1500);
  delay(200);
  ledcWriteTone(Buzzer_pin, 1800);
  delay(250);
  ledcWriteTone(Buzzer_pin, 2200);
  delay(350);
  ledcWriteTone(Buzzer_pin, 0);
}

//Losing Sound
void playLoseSound() {
  ledcWriteTone(Buzzer_pin, 1000);
  delay(350);
  ledcWriteTone(Buzzer_pin, 600);
  delay(350);
  ledcWriteTone(Buzzer_pin, 0);
  ledcWriteTone(Buzzer_pin, 400);
  delay(500);
  ledcWriteTone(Buzzer_pin, 0);
}

//show you lose text on screen
void showLose(){
  digitalWrite(RedLights, LOW); // Turn off Red LED
  digitalWrite(GreenLights, LOW); // Turn off Green LED
  display.clearDisplay();           // clear the display
  display.setTextSize(2);          // set text size to 2
  display.setTextColor(SSD1306_WHITE); // set text color to white
  display.setCursor(35,10);          // set cursor to top left corner
  display.print("You");     // printa "Received: " on the display
  display.setCursor(30,30);        // set cursor to second line
  display.print("Lose!");     // print the received data on the display
  display.display();               // update the display
  
  // Invert and restore display, pausing in-between
  display.invertDisplay(true);
  delay(500);
  display.invertDisplay(false);
  delay(300);
}

//show the next level text on screen
void showextLevel(int8_t level){
  display.clearDisplay(); // Clear the display
  display.setCursor(14, 15); // Set cursor to top left corner
  display.setTextSize(2); // Set text size to 2
  display.setTextColor(SSD1306_WHITE); // Set text color to white
  display.print("Press for"); // Print "Press for" on the display
  display.setCursor(14, 35); // Set cursor to next line
  display.print("level " + String(level)); // Print "level X" on the display
  display.display(); // Update the display
}

//celebration function
void celebration(){
  testfillcircle();    // Draw circles (filled)

  display.clearDisplay();           // clear the display
  display.setTextSize(2);          // set text size to 2
  display.setTextColor(SSD1306_WHITE); // set text color to white
  display.setCursor(30,10);          // set cursor to top left corner
  display.print("You're ");     // printa "Received: " on the display
  display.setCursor(15,30);         // set cursor to second line
  display.print("a Winner!");     // print the received data on the display
  display.display();               // update the display
  
  // Invert and restore display, pausing in-between
  display.invertDisplay(true);
  delay(500);
  display.invertDisplay(false);
  delay(500);
}

ICACHE_RAM_ATTR void Play_button_pressed() {
  Serial.println("Play button pressed!");
  if (digitalRead(playButton) == LOW) {
    pressStartTime = millis();
    buttonHeld = false;
    buttonPressed = true;
  }
}


void setup() {
  Serial.begin(115200); // Initialize serial communication for debugging

  Wire.begin(4, 15); // Needs to come before display.begin() is used
  //On Heltec boards, the OLED is built-in and powered via GPIO 16 and a FET. 
  //It must be pulled HIGH before the OLED is usable.
  pinMode(16, OUTPUT);       // Power control for OLED
  digitalWrite(16, HIGH);    // Turn on the mosfet connected to OLED
  delay(100);                // Allow time for OLED to power up

  pinMode(playButton, INPUT_PULLUP); // Set play button pin as input with pull-up resistor
  attachInterrupt(digitalPinToInterrupt(playButton), Play_button_pressed, FALLING); // Attach interrupt to play button for falling edge
  
  pinMode(RedLights, OUTPUT); // Set RedLights pin as output
  pinMode(GreenLights, OUTPUT); // Set GreenLights pin as output
  ledcAttachChannel(Buzzer_pin, 5000, 8, 0);  // ledcAttachChannel(pin, frequency, resolution, channel)
  ledcWriteTone(Buzzer_pin, 0); // Initialize buzzer to off

  //On Heltec boards, the OLED is built-in and powered via GPIO 16 and a FET. 
  //It must be pulled HIGH before the OLED is usable.
  pinMode(16, OUTPUT);       // Power control for OLED
  digitalWrite(16, HIGH);    // Turn on the mosfet connected to OLED
  delay(100);                // Allow time for OLED to power up
  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if(!display.begin(SSD1306_SWITCHCAPVCC, i2c_Address)) {
  Serial.println(F("SSD1306 allocation failed"));
  for(;;); // Don't proceed, loop forever
  }
  Serial.println("Display Initialized OK!");
  
  display.clearDisplay();           // clear the display
  display.setTextSize(2);          // set text size to 2
  display.setTextColor(SSD1306_WHITE); // set text color to white
  display.setCursor(14,0);          // set cursor to top left corner
  display.print("Hamba");         // print "Hamba" on the display
  display.setCursor(14,20);         // set cursor to next line
  display.print("Game!!");           // print "Game!!" on the display
  display.display();               // update the display
  // Draw loading bar border
  display.drawRect(14, 40, 100, 10, SSD1306_WHITE);
  display.display();
  // Animate loading bar
  for (int i = 0; i <= 100; i += 5) {
    int barWidth = i;
    display.fillRect(15, 41, barWidth, 8, SSD1306_WHITE);
    // Percentage text
    display.setCursor(54, 55);
    display.setTextSize(1);
    display.setTextColor(SSD1306_WHITE, SSD1306_BLACK); // overwrite old text
    display.print(i);
    display.print("%");
    display.display();
    delay(50);
  }

  playStartSound(); // Play the starting sound
  Serial.println("console started!");
}



void play_hamba_match_game(){
  //run filled cow image
  for (cow_position = -100; cow_position < 100; cow_position=cow_position+5) {
      display.clearDisplay();           // clear the display
      display.setCursor(0,0);          // set cursor to top left corner
      display.setTextSize(1);          // set text size to 1
      display.setTextColor(SSD1306_WHITE); // set text color to white
      display.print("Level: "); // show level text
      display.print(diffLevel); // print the current difficulty level
      display.drawBitmap(cow_position, 0, cowFilled, LOGO_WIDTH, LOGO_HEIGHT, SSD1306_WHITE);
      //hold outline of the cow
      display.drawBitmap(0, 0, cowOutline, LOGO_WIDTH, LOGO_HEIGHT, SSD1306_WHITE);
      display.display();            // update the display
      delay(40-(int)pow(diffLevel, 2)*1.5);                      // wait for difflevel milliseconds
      
      //loop until button is pressed
      if(buttonPressed == true) { //stop when button is pressed
        break;
      }
      
      //flash the red and blue lights
      unsigned long currentMillis = millis(); // Get the current time
      if(currentMillis - previousMillis >= 500) { // If 500 milliseconds have passed
        previousMillis = currentMillis; // Store the current time
        ledState = !ledState; // Change the state of the LED
        digitalWrite(RedLights, ledState); // Turn on RedLights
        digitalWrite(GreenLights, !ledState); // Turn off GreenLights
        //play buzzer sound
        ledcWriteTone(Buzzer_pin, 1000);
      }
      else {
        ledcWriteTone(Buzzer_pin, 0); // Turn off buzzer sound
      }
  }

if(buttonPressed){
    delay(200); //wait to show the last cow position frame
    // If the game is not running, turn off the lights
    digitalWrite(RedLights, LOW); // Turn on RedLights
    digitalWrite(GreenLights, LOW); // Turn on GreenLights

    if(cow_position >= -10 && cow_position <= -6) {
      playWinSound(); // Play the winning sound
      digitalWrite(RedLights, HIGH); // Turn off RedLights
      digitalWrite(GreenLights, HIGH); // Turn off GreenLights
  
      switch (diffLevel) {
        case 1:
          diffLevel = diffLevel + 1; //increase difficulty level for next round
          showextLevel(diffLevel);
          break;
        case 2:
          diffLevel = diffLevel + 1; //increase difficulty level for next round
          showextLevel(diffLevel);
          break;
        case 3:
          diffLevel = diffLevel + 1; //increase difficulty level for next round
          showextLevel(diffLevel);
          break;
        case 4:
          diffLevel = diffLevel + 1; //increase difficulty level for next round
          showextLevel(diffLevel);
          break;
        case 5:
          celebration(); // Call the celebration function to show the celebration graphics
          display.clearDisplay(); // Clear the display
          display.setCursor(14, 15); // Set cursor to top left corner
          display.setTextSize(2); // Set text size to 2
          display.setTextColor(SSD1306_WHITE); // Set text color to white
          display.print("Play"); // Print "Play" on the display
          display.setCursor(14, 35); // Set cursor to next line
          display.print("Again!!"); // Print "Again!!" on the display
          display.display(); // Update the display
          ledcWriteTone(Buzzer_pin, 0); // Play no  sound while waiting
          diffLevel = 1; //reset difficulty level
          break;
      }
      //wait until the play button is pressed to play again
      while (digitalRead(playButton) == HIGH) {
        delay(50);
      }
      buttonPressed = false; //reset button pressed flag
      }

    else {
      diffLevel = 1; //reset difficulty level
      playLoseSound(); // Play the losing sound
      while (digitalRead(playButton) == HIGH) {
        //display win or loose
        display.clearDisplay(); // Clear the display
        display.setCursor(10, 20); // Set cursor to top left corner
        display.setTextSize(2); // Set text size to 2
        display.setTextColor(SSD1306_WHITE); // Set text color to white
        display.print("You Lose!"); // Print "You Lose!" on the display
        display.setCursor(12, 40); // Set cursor to top left corner
        display.setTextSize(1); // Set text size to 1
        display.setTextColor(SSD1306_WHITE); // Set text color to white
        display.print("Try Again!"); // Print "Try Again!" on the display
        display.display(); // Update the display
        }
        buttonPressed = false; //reset button pressed flag
      }
    }
}


void play_hamba_run_game(){
  int8_t boxHeight = 0;
  uint8_t numOfObstacles = 0;
  bool cowJump = false;
  unsigned long currentObstacleTime = millis();

  if(currentObstacleTime - lastObstacleTime >= random(100,1000)) {
    lastObstacleTime = currentObstacleTime; // Store the current time
    //select obstacle number and height to send from right to left
    numOfObstacles = random(0,3); //random number of obstacles between 0 and 2
    boxHeight = random(5, 25); //random height of obstacles
  }
  //scan through the whole screen width
  for(int i=display.width(); i>=-4; i-=4) {
    //increment score
    score += 0.2; // Increase score
    int scoreInt = round(score); // Round score to nearest integer
    //check if the button is pressed to bool jump the cow
    if(buttonPressed == true) { //stop when button is pressed
      cowJump = true;
      buttonPressed = false; //reset button pressed flag
    }
    if (cowJump) {
      cowPosition += 5; // Move the cow up
      if (cowPosition >= 30) { // If the cow reaches the peak height
        cowJump = false; // Start moving down
      }
    } else {
      if (cowPosition > 0) {
        cowPosition -= 2; // Move the cow down
      }
    }
    //check if the cow hits the obstacle
    //if the number of obstacles is more than 0 and the obstacle is in the cow's x range and the cow's y position is less than the obstacle height
    //if the obstacle count is 2 then the obstacle must pass more to the left before hitting the cow
    if (numOfObstacles > 0 && i <= 26 && i >= (numOfObstacles == 2 ? 2 : 16) && (cowPosition+10) <= boxHeight + 6) {
      // Cow hits the obstacle
      playLoseSound(); // Play the losing sound
      delay(500); // Wait for a moment      
      showLose(); // Show lose message and update
      //show score
      display.setCursor(30, 50); // Set cursor below text
      display.setTextSize(1); // Set text size to 1
      display.setTextColor(SSD1306_WHITE); // Set text color to white
      display.print("Score: "); // Print "Score: " on the display
      display.print(scoreInt); // Print the score on the display
      display.display(); // Update the display
      cowPosition = 0; // Reset cow position
      numOfObstacles = 0; // Reset obstacles
      lastObstacleTime = millis(); // Reset obstacle timer
      delay(2500); // Show the message for 2 seconds
      score = 0; // Reset score
      break; // Exit the for loop to restart the game
    }
    else{
      //show game on the screen
      display.clearDisplay();           // clear the display
      //draw the ball
      display.fillCircle(20, 54-cowPosition, 6, SSD1306_WHITE); // Draw circle
      //draw the moving obstacle
      switch (numOfObstacles) {
        case 0:
          //no obstacle
          break;
        case 1:
          display.fillRect(i, 64-boxHeight, 4, boxHeight, SSD1306_WHITE); // Draw rectangle
          break;
        case 2:
          display.fillRect(i, 64-boxHeight, 4, boxHeight, SSD1306_WHITE); // Draw rectangle
          display.fillRect(i+10, 64-boxHeight, 4, boxHeight, SSD1306_WHITE); // Draw rectangle
          break;
      }
      //draw the score
      display.setCursor(0,0);          // set cursor to top left corner
      display.setTextSize(1);          // set text size to 1
      display.setTextColor(SSD1306_WHITE); // set text color to white
      display.print("Score: "); // show level text
      display.print(scoreInt); // print the current difficulty level

      display.display(); // Update screen with each newly-drawn rectangle
    }

      //flash the red and blue lights
      unsigned long currentMillis = millis(); // Get the current time
      if(currentMillis - previousMillis >= 500) { // If 500 milliseconds have passed
        previousMillis = currentMillis; // Store the current time
        ledState = !ledState; // Change the state of the LED
        digitalWrite(RedLights, ledState); // Turn on RedLights
        digitalWrite(GreenLights, !ledState); // Turn off GreenLights
        //play buzzer sound
        ledcWriteTone(Buzzer_pin, 1000);
      }
      else {
        ledcWriteTone(Buzzer_pin, 0); // Turn off buzzer sound
      }
    }
  }



void play_number_hold_game(){
  // while(buttonPressed == false) { //loop until button is pressed
    currentNumber = (currentNumber % 10) + 1;

    display.clearDisplay();
    //show level at top left
      display.setCursor(0,0);          // set cursor to top left corner
      display.setTextSize(1);          // set text size to 1
      display.setTextColor(SSD1306_WHITE); // set text color to white
      display.print("L: "); // show level text
      display.print(diffLevel); // print the current difficulty level
    //Target number at top 
    display.setTextSize(2); 
    display.setTextColor(SSD1306_WHITE); 
    display.setCursor(16, 45); 
    display.print("Target:"); 
    display.setCursor(100, 45); 
    display.print(targetNumber); 
    // Circulating number at bottom 
    display.setTextSize(4); 
    display.setCursor(50, 10); 
    display.print(currentNumber); 
    display.display();
    //delay(150); // Small delay to allow display to update
    delay(150-(int)pow(diffLevel, 3));                      // wait for difflevel milliseconds

      //flash the red and blue lights
    unsigned long currentMillis = millis(); // Get the current time
    if(currentMillis - previousMillis >= 500) { // If 500 milliseconds have passed
      previousMillis = currentMillis; // Store the current time
      ledState = !ledState; // Change the state of the LED
      digitalWrite(RedLights, ledState); // Turn on RedLights
      digitalWrite(GreenLights, !ledState); // Turn off GreenLights
      //play buzzer sound
      ledcWriteTone(Buzzer_pin, 1000);
    }
    else {
      ledcWriteTone(Buzzer_pin, 0); // Turn off buzzer sound
    }
  // }

  //check for win or lose condition
  if(buttonPressed){
    delay(200); //wait to show the last cow position frame
    // If the game is not running, turn off the lights
    digitalWrite(RedLights, LOW); // Turn on RedLights
    digitalWrite(GreenLights, LOW); // Turn on GreenLights

    if(currentNumber == targetNumber) {
      playWinSound(); // Play the winning sound
      digitalWrite(RedLights, HIGH); // Turn off RedLights
      digitalWrite(GreenLights, HIGH); // Turn off GreenLights

      switch (diffLevel) {
        case 1:
          diffLevel = diffLevel + 1; //increase difficulty level for next round
          showextLevel(diffLevel);
          break;
        case 2:
          diffLevel = diffLevel + 1; //increase difficulty level for next round
          showextLevel(diffLevel);
          break;
        case 3:
          diffLevel = diffLevel + 1; //increase difficulty level for next round
          showextLevel(diffLevel);
          break;
        case 4:
          diffLevel = diffLevel + 1; //increase difficulty level for next round
          showextLevel(diffLevel);
          break;
        case 5:
          celebration(); // Call the celebration function to show the celebration graphics
          display.clearDisplay(); // Clear the display
          display.setCursor(14, 15); // Set cursor to top left corner
          display.setTextSize(2); // Set text size to 2
          display.setTextColor(SSD1306_WHITE); // Set text color to white
          display.print("Play"); // Print "Play" on the display
          display.setCursor(14, 35); // Set cursor to next line
          display.print("Again!!"); // Print "Again!!" on the display
          display.display(); // Update the display
          ledcWriteTone(Buzzer_pin, 0); // Play no  sound while waiting
          diffLevel = 1; //reset difficulty level
          break;
      }
    
      //wait until the play button is pressed to play again
      while (digitalRead(playButton) == HIGH) {
        delay(50);
      }
      buttonPressed = false; //reset button pressed flag
      }


    else {
      diffLevel = 1; //reset difficulty level
      playLoseSound(); // Play the losing sound
      while (digitalRead(playButton) == HIGH) {
        //display win or loose
        display.clearDisplay(); // Clear the display
        display.setCursor(10, 20); // Set cursor to top left corner
        display.setTextSize(2); // Set text size to 2
        display.setTextColor(SSD1306_WHITE); // Set text color to white
        display.print("You Lose!"); // Print "You Lose!" on the display
        display.setCursor(12, 40); // Set cursor to top left corner
        display.setTextSize(1); // Set text size to 1
        display.setTextColor(SSD1306_WHITE); // Set text color to white
        display.print("Try Again!"); // Print "Try Again!" on the display
        display.display(); // Update the display
        }
        buttonPressed = false; //reset button pressed flag
      }
    targetNumber = random(1, 11); // reset random 1–10
    currentNumber = 0;  //reset current number to 0
    }
}



void loop() {
   if (endGame) drawMenu(); //show menu when no gameq is running
   else if (runHambaRun == true && !endGame) play_hamba_run_game(); // Call the play_hamba_run_game function to run the game
   else if (runHambaMatch == true && !endGame) play_hamba_match_game(); // Call the play_hamba_match_game function to run the game
   else if (runNumberHold == true && !endGame) play_number_hold_game(); // Call the play_number_hold_game function to run the game

    //exit from any game if button is held for more than 2 seconds
    if (digitalRead(playButton) == LOW){
      if(millis() - pressStartTime > 2000) {
        if(digitalRead(playButton) == LOW) {
          digitalWrite(RedLights, LOW); // Turn off RedLights
          digitalWrite(GreenLights, LOW); // Turn off GreenLights
          ledcWriteTone(Buzzer_pin, 0); // Turn off buzzer sound
          runHambaRun = false;
          runHambaMatch = false;
          runNumberHold = false;
          endGame = true;  // Set flag to indicate game is over
          diffLevel = 1; //reset difficulty level
        }
      }
    }

    //show menu until a game is selected
    if (buttonPressed) {
      buttonPressed = false;
      // Debounce check
      delay(50);
      if (digitalRead(playButton) == LOW) {
        unsigned long pressDuration = 0;

        // Wait until button released
        while (digitalRead(playButton) == LOW) {
          pressDuration = millis() - pressStartTime;
          if (pressDuration > 1000 && !buttonHeld) {  // long press
              buttonHeld = true;
              endGame = false; // Exit menu mode
              menuAction(currentMenu);
              break;
          }
        }
        // If short press (less than 1s)
        if (!buttonHeld) {
          currentMenu = (currentMenu + 1) % menuCount; // Move to next menu item
          drawMenu();
        }
      }
    }
}